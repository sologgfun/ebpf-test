// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLoader returns the embedded CollectionSpec for loader.
func loadLoader() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LoaderBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load loader: %w", err)
	}

	return spec, err
}

// loadLoaderObjects loads loader and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*loaderObjects
//	*loaderPrograms
//	*loaderMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLoaderObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLoader()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// loaderSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loaderSpecs struct {
	loaderProgramSpecs
	loaderMapSpecs
}

// loaderSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loaderProgramSpecs struct {
	MonitorTraffic *ebpf.ProgramSpec `ebpf:"monitor_traffic"`
}

// loaderMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loaderMapSpecs struct {
	TrafficMap *ebpf.MapSpec `ebpf:"traffic_map"`
}

// loaderObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLoaderObjects or ebpf.CollectionSpec.LoadAndAssign.
type loaderObjects struct {
	loaderPrograms
	loaderMaps
}

func (o *loaderObjects) Close() error {
	return _LoaderClose(
		&o.loaderPrograms,
		&o.loaderMaps,
	)
}

// loaderMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLoaderObjects or ebpf.CollectionSpec.LoadAndAssign.
type loaderMaps struct {
	TrafficMap *ebpf.Map `ebpf:"traffic_map"`
}

func (m *loaderMaps) Close() error {
	return _LoaderClose(
		m.TrafficMap,
	)
}

// loaderPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLoaderObjects or ebpf.CollectionSpec.LoadAndAssign.
type loaderPrograms struct {
	MonitorTraffic *ebpf.Program `ebpf:"monitor_traffic"`
}

func (p *loaderPrograms) Close() error {
	return _LoaderClose(
		p.MonitorTraffic,
	)
}

func _LoaderClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed loader_bpfel.o
var _LoaderBytes []byte
